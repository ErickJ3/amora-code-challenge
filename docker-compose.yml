services:
  postgres:
    image: postgres:16-alpine
    container_name: amora-postgres
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      TZ: 'UTC'
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - amora-net
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: amora-api
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_HOST=postgres
      - DATABASE_USERNAME=${DATABASE_USERNAME} 
      - DATABASE_PASSWORD=${DATABASE_PASSWORD} 
      - DATABASE_NAME=${DATABASE_NAME}         
      - DATABASE_PORT=5432                          
      - NODE_ENV=production
    ports:
      - '${API_PORT}:4000'
    depends_on:
      - postgres
    networks:
      - amora-net
    restart: unless-stopped
    command: node apps/api/dist/server.js

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production 
    container_name: amora-web
    environment:
      - API_URL=${API_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    ports:
      - '${WEB_PORT}:3000'
    depends_on:
      - api
    networks:
      - amora-net
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  amora-net:
    name: amora-net
    driver: bridge
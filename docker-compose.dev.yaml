services:
  postgres:
    image: postgres:16-alpine
    container_name: amora-postgres-dev
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      TZ: 'UTC'
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - amora-dev-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development 
    container_name: amora-api-dev
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - DATABASE_HOST=postgres
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=5432
      - NODE_ENV=development
    ports:
      - '${API_PORT}:4000'
    volumes:
      - ./apps/api:/app/apps/api  
      - ./apps/api/node_modules:/app/apps/api/node_modules
      - /app/node_modules 
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - amora-dev-net
    restart: unless-stopped
    command: bun --watch apps/api/app/server.ts

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: amora-web-dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT}
      - NODE_ENV=development
      - WATCHPACK_POLLING=true 
    ports:
      - '${WEB_PORT}:3000'
    volumes:
      - ./apps/web:/app/apps/web
      - ./apps/web/node_modules:/app/apps/web/node_modules
      - /app/node_modules
    depends_on:
      - api
    networks:
      - amora-dev-net
    restart: unless-stopped

volumes:
  postgres_dev_data:

networks:
  amora-dev-net:
    name: amora-dev-net
    driver: bridge